; our abi for 16bit
; ax,bx,cx,dx,dp - можно менять, не рассчитываем, что там лежит то, что нам надо
; si, di - должны не меняться от вызовов макросов и функций
; с остальными вроде очев
[BITS 16]           ; Указание ассемблеру, что код будет выполняться в 16-битном режиме.
jmp _start

print_string:
    mov ah, 0x0E    ; Устанавливаем режим BIOS для вывода символов в текстовом режиме (INT 0x10).
.next_char:
    lodsb           ; Загружаем следующий байт (символ) из [SI] в AL.
    cmp al, 0       ; Сравниваем AL с нулем (нулевой байт означает конец строки).
    je done         ; Если AL равен 0, перейти на метку done.
    int 0x10        ; Вызов прерывания 0x10 для вывода символа на экран.
    jmp .next_char  ; Переход к обработке следующего символа.
done:               ; Метка окончания вывода строки.
    ret             ; Возврат из процедуры.

_start:

    mov sp, 0x0500    ;в ss нельзя закинуть сразу 0х1400, тк тогда sp=0
    mov ss, sp        ;а тк стек растет вниз, мы попадаем в забавную ситуацию
    mov sp, 0xf000    ;такая комбинация даст стек на 0х14000

    cli                 ; Отключаем прерывания для безопасности при настройке сегментных регистров.

    mov ax, 0x07c0      ; Загружаем значение 0x07C0 в регистр AX.
    mov ds, ax          ; Устанавливаем сегмент данных (DS) на 0x07C0 (начало загрузочного сектора).

    sti                 ; Включаем прерывания после инициализации сегментов.

    mov si, msg
    call print_string

    jmp $

msg db '  ____   _____              _', 10, 13
    db ' / __ \ / ____|     (*)    | |', 10, 13
    db '| |  | | (___  _ __  _  ___| |__   _____   __', 10, 13
    db '| |  | |\___ \|  _ \| |/ __|  _ \ / _ \ \ / /', 10, 13
    db '| |__| |____) | |_) | | (__| | | |  __/\ V /', 10, 13
    db ' \____/ \____/| .__/|_|\___|_| |_|\___| \_/', 10, 13
    db '              | |', 10, 13
    db '              |_|', 10, 13, 0

times 510-($-$$) db 0     ; Добавляем нули, чтобы заполнить до 510 байт (размер загрузочного сектора 512 байт).
dw 0xAA55                 ; Магическое число завершения загрузочного сектора, которое BIOS использует для проверки загрузочного сектора.
